"""
Module for converting tree-like structures into tables and visa-versa.
"""
from typing import Type, Dict, Optional, Tuple

import obsplus
from obsplus.structures.model import ObsPlusModel


class Mill:
    """
    A class for managing tree-like data structures with table slices.

    Currently this just uses instances of ObsPlusModels but we plan to
    switch to awkward array in the future.
    """

    _model: Type[ObsPlusModel] = ObsPlusModel
    _id_name: Optional[str] = None
    _id_map: Dict[str, tuple]
    _data: dict
    _dataframers: Dict[str, Type["obsplus.DataFramer"]]

    def __init_subclass__(cls, **kwargs):
        """Ensure subclasses have their own framers dict."""
        cls._dataframers = {}

    def __init__(self, data):
        self._data = self._get_data(data)
        self._stash = {}
        self._id_map = {}

    def _reset_cache(self):
        """Reset caches, eg after data update."""
        self._stash = {}
        self._id_map = {}

    def _get_data(self, data) -> dict:
        """Get the internal data structure."""
        if isinstance(data, dict):
            return data
        else:
            return self._model.from_orm(data).dict()

    @classmethod
    def register_data_framer(cls, name):
        """
        Register a dataframer on this mill.
        """

        def _func(framer: "obsplus.DataFramer"):
            cls._dataframers[name] = framer
            return framer

        # TODO add check for already defined mappers
        return _func

    def get_df(self, name):
        """
        Return a dataframe generated by a registered DataFramer.

        Parameters
        ----------
        name
            A string identifying the dataframe.
        """
        try:
            Framer = self._dataframers[name]
        except KeyError:
            msg = (
                f"Unknown dataframer {name}, support framers are: \n"
                f"{list(self._dataframers)}"
            )
            raise KeyError(msg)
        framer = Framer(self)
        return framer.get_dataframe(self._data, stash=self._stash)

    def _index_resource_ids(self):
        """Index resource ids."""
        schema = self._model.get_obsplus_schema()
        if self._id_name is None:
            return {}  # Ids are not used on this schema
        addresses = schema[self._id_name]
        breakpoint()
        print(self)

    def get_referred_address(self, id_str) -> Tuple:
        """
        Get the address of the requested ID string.

        An empty tuple is returned if it is not found.
        """
        if id_str in self._id_map:
            return self._id_map[id_str]
        self._id_map = self._index_resource_ids()
        return self._id_map.get(id_str, ())

    def __str__(self):
        msg = f"Mill with spec of {self._model.__name__}"
        return msg
